{
    "contents" : "source(\"load.R\")\nsource(\"func.R\")\nsource(\"clean.R\")\n\n# Globally define a place where all users can share some reactive data.\nvars <- reactiveValues(chat=NULL, users=NULL)\n\n#' Get the prefix for the line to be added to the chat window. Usually a newline\n#' character unless it's the first line.\nlinePrefix <- function(){\n  if (is.null(isolate(vars$chat))){\n    return()\n  }\n  return(\"<br />\")\n}\n\n\nshinyServer(function(input, output, session) {\n  # Create a spot for reactive variables specific to this particular session\n  sessionVars <- reactiveValues(username = \"\")\n  \n  # When a session is ended, remove the user and note that they left the room. \n  session$onSessionEnded(function() {\n    isolate({\n      vars$users <- vars$users[vars$users != sessionVars$username]\n      vars$chat <- c(vars$chat, paste0(linePrefix(),\n                     tags$span(class=\"user-exit\",\n                       sessionVars$username,\n                       \"left the room.\")))\n    })\n  })\n  \n  # Observer to handle changes to the username\n  observe({\n    if(input$sendU < 1){\n      # The code must be initializing, b/c the button hasn't been clicked yet.\n      return()\n    }\n\n      # A previous username was already given\n      isolate({\n        if (input$user == sessionVars$username || input$user == \"\"){\n          # No change. Just return.\n          return()\n        }\n    \n        # Updating username      \n        # First, remove the old one\n        vars$users <- vars$users[vars$users != sessionVars$username]\n        \n        # Note the change in the chat log\n        vars$chat <<- c(vars$chat, paste0(linePrefix(),\n                                          tags$span(class=\"user-change\",\n                                                    paste0(\"Ha llegado:\",\"\\\"\", input$user, \"\\\"\"))))\n        \n        # Now update with the new one\n        sessionVars$username <- input$user\n      })\n    # Add this user to the global list of users\n    isolate(vars$users <- c(vars$users, sessionVars$username))\n  })\n  \n  # Keep the username updated with whatever sanitized/assigned username we have\n  observe({\n    updateTextInput(session, \"user\", \n                    value=sessionVars$username)    \n  })\n  \n  # Keep the list of connected users updated\n  output$userList <- renderUI({\n    tagList(tags$ul( lapply(vars$users, function(user){\n      return(tags$li(user))\n    })))\n  })\n  \n  # Listen for input$send changes (i.e. when the button is clicked)\n  observe({\n    if(input$send < 1){\n      # The code must be initializing, b/c the button hasn't been clicked yet.\n      return()\n    }\n    isolate({\n    \t# important code\n    \tyou_var <-c(\"you\",\"your\",\"ur\",\"u\",\"youre\")\n    \tno_var <- c(\"not\",\"no\",\"dont\",\"arent\")\n    \t\n    \tcomm <- input$entry\n    \tcomm <- cleanComm(comm)\n    \tcomm <- splitting(comm)\n    \t\n    \tif(sum(comm %in% no_var)>0){\n    \t\tno_pos <- min(which(comm %in% no_var))\n    \t\tcomm[no_pos]<-\"not\"\n    \t\tfor(i in (no_pos+1):length(comm)){\n    \t\t\tcomm[i] <- paste(comm[no_pos],comm[i],sep=\"-\")\n    \t\t}\n    \t}\n    \tinsult <- 0\n    \tyou_badword<- paste(\"you\",badwords,sep= \"-\")\n    \t\n    \tif(sum(comm %in% you_var)>0){\n    \t\tyou_pos <- min(which(comm %in% you_var))\n    \t\tcomm[you_pos]<-\"you\"\n    \t\tfor(i in (you_pos+1):length(comm)){\n    \t\t\tcomm[i] <- paste(comm[you_pos],comm[i],sep=\"-\")\n    \t\t}\n    \t\tif(sum(comm %in% you_badword)>0){\n    \t\t\tinsult <- insult + 1\n    \t\t}\n    \t}\n    \t\n    \tif(sum(comm %in% badwords)>0){\n    \t\tinsult <- insult + 1\n    \t}\n    \t\n    \tif(insult>0){\n    \t\tnote <- \"flame\"\n    \t}else{\n    \t\tnote <- \"\"\n    \t}\n    \t# important code above\n    \t# Add the current entry to the chat log.\n      if(sessionVars$username == \"\"){\n        vars$chat <<- c(vars$chat, \n                        paste0(linePrefix(),\n                               tags$span(class=\"username\",\n                                         tags$abbr(title=Sys.time(), \"Anonymous\")\n                               ),\n                               \": \",\n                               tagList(input$entry),tags$span(class=\"note\",\" \",note)))\n      }else {\n      vars$chat <<- c(vars$chat, \n                      paste0(linePrefix(),\n                        tags$span(class=\"username\",\n                          tags$abbr(title=Sys.time(), sessionVars$username)\n                        ),\n                        \": \",\n                        tagList(input$entry),tags$span(class=\"note\",\" \",note)))}\n    })\n    # Clear out the text entry field.\n    updateTextInput(session, \"entry\", value=\"\")\n  })\n  \n  # Dynamically create the UI for the chat window.\n  output$chat <- renderUI({\n    if (length(vars$chat) > 500){\n      # Too long, use only the most recent 500 lines\n      vars$chat <- vars$chat[(length(vars$chat)-500):(length(vars$chat))]\n    }\n    # Save the chat object so we can restore it later if needed.\n    saveRDS(vars$chat, \"app/chat.Rds\")\n    \n    # Pass the chat log through as HTML\n    HTML(vars$chat)\n  })\n})\n",
    "created" : 1439319728716.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "105790382",
    "id" : "2075C4FF",
    "lastKnownWriteTime" : 1439319749,
    "path" : "C:/Users/wilmer g/Desktop/DM/Flame_Detector_Chat/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}