{
    "contents" : "# Incompatibilidades entre los paquetes RTextTools arrojarán alguno de los siguientes errores:\n#     a. Error in if (attr(weighting, \"Acronym\") == ...\n#     b. Error in x$nrow : $ operator is invalid for atomic vectors\n#\n# El primer error se soluciona modificando el código fuente de la función create_matrix\n# tal como indican acá: https://groups.google.com/forum/#!topic/rtexttools-help/Drqr3Z897Mk\n#\n# Luego se genera el segundo error. Se intentó solucionar siguiendo los pasos planteados\n# en: http://crimsoncoffee.blogspot.com/2015/07/dealing-with-package-incompatibilities.html\n# Pero el error persiste. \n#\n# Versión R.2.0\n\nsvm_predict <- function(testdata){\n  # Create the document term matrix\n  #matrix <- create_matrix(as.character(train$Comment))\n  \n  # Configure the training data\n  #container <- create_container(matrix, train$Insult, trainSize = 1:2799, virgin = FALSE)\n  #Error in x$nrow : $ operator is invalid for atomic vectors\n  \n  # Train a SVM Model\n  # modelSVM <- train_model(container, \"SVM\", kernel = \"linear\", cost = 1)\n  # Create a prediction document term matrix\n  createMatrix <- function (textColumns, language = \"english\", minDocFreq = 1, \n                            maxDocFreq = Inf, minWordLength = 3, maxWordLength = Inf, \n                            ngramLength = 1, originalMatrix = NULL, removeNumbers = FALSE, \n                            removePunctuation = TRUE, removeSparseTerms = 0, removeStopwords = TRUE, \n                            stemWords = FALSE, stripWhitespace = TRUE, toLower = TRUE, \n                            weighting = weightTf) \n  {\n    stem_words <- function(x) {\n      split <- strsplit(x, \" \")\n      return(wordStem(unlist(split), language = language))\n    }\n    tokenize_ngrams <- function(x, n = ngramLength) return(rownames(as.data.frame(unclass(textcnt(x, \n                                                                                                  method = \"string\", n = n)))))\n    control <- list(bounds = list(local = c(minDocFreq, maxDocFreq)), \n                    language = language, tolower = toLower, removeNumbers = removeNumbers, \n                    removePunctuation = removePunctuation, stopwords = removeStopwords, \n                    stripWhitespace = stripWhitespace, wordLengths = c(minWordLength, \n                                                                       maxWordLength), weighting = weighting)\n    if (ngramLength > 1) {\n      control <- append(control, list(tokenize = tokenize_ngrams), \n                        after = 7)\n    }\n    else {\n      control <- append(control, list(tokenize = scan_tokenizer), \n                        after = 4)\n    }\n    if (stemWords == TRUE && ngramLength == 1) \n      control <- append(control, list(stemming = stem_words), \n                        after = 7)\n    trainingColumn <- apply(as.matrix(textColumns), 1, paste, \n                            collapse = \" \")\n    trainingColumn <- sapply(as.vector(trainingColumn, mode = \"character\"), \n                             iconv, to = \"UTF8\", sub = \"byte\")\n    corpus <- Corpus(VectorSource(trainingColumn), readerControl = list(language = language))\n    matrix <- DocumentTermMatrix(corpus, control = control)\n    if (removeSparseTerms > 0) \n      matrix <- removeSparseTerms(matrix, removeSparseTerms)\n    if (!is.null(originalMatrix)) {\n      terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in% \n                                                 colnames(matrix))])\n      weight <- 0\n      if (attr(weighting, \"acronym\") == \"tf-idf\") \n        weight <- 1e-09\n      amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))\n      colnames(amat) <- terms\n      rownames(amat) <- rownames(matrix)\n      fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in% \n                                                            colnames(originalMatrix))], amat), weighting = weighting)\n      matrix <- fixed\n    }\n    matrix <- matrix[, sort(colnames(matrix))]\n    gc()\n    return(matrix)\n  }\n  save(modelSVM,matrix,createMatrix,file = \"svmFit.Rdata\")\n  load(\"/models/svmFit.Rdata\")\n  \n  predMatrix <- createMatrix(c(as.character(train$Comment),testdata), originalMatrix = matrix, weighting = tm::weightTfIdf)\n  \n  # Create the corresponding container\n  predContainer <- create_container(predMatrix,trainSize = 1:7681,testSize = 7682)\n  \n  # Predict\n  results <- classify_model(predContainer, modelSVM)\n  results\n}\n# r <- c()\n# for(i in 1:length(train$Comment)){\n#\t r[i]=svm_predict(as.character(train$Comment[i]))\n# }\n# train1 <-cbind(train,svm =r)\n# table(train1$Insult,train1$svm)\n# library(\"caret\")\n# confusionMatrix(train1$Insult,train1$svm)",
    "created" : 1439328882686.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2941054194",
    "id" : "B6969252",
    "lastKnownWriteTime" : 1439338991,
    "path" : "C:/Users/wilmer g/Desktop/DM/WarmChat/models/svm_model.r",
    "project_path" : "models/svm_model.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}