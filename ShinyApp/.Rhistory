plot(dt)
r_part = rpart(training$class~., data = training, method = "class")
rpart.plot(r_part)
```
You can also embed plots, for example:
```{r, echo=FALSE}
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
View(ds)
plot(dt)
plot(dt)
matriz$overall[1]
matriz=confusionMatrix(predict(arbol2, newData = prueba, type = "class"), entrenamiento$V7)
require(rpart.plot)
arbol2 = rpart(entrenamiento$V7~.,data=entrenamiento,method = "class",control=rpart.control(minsplit=5,cp=0.01))
library(rpart)
library(caret)
raw_data <- read.csv2(
file = "http://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data",
header = F,sep = ",")
header <- c("buying","maint","doors","persons","lug_boot","safety")
names(raw_data) <- c(header, "class")
partitions <- createFolds(y = raw_data$class,k = 5,list = T,returnTrain = F)
partitions
attributes(partition)
attributes(partitions)
attributes(partitions)
partitions$"Fold1"
length(partitions$"Fold1")
library(arules)
library(arules)
x = random.transactions(nItems = 10, nTrans = 2500, method = "independent", iProb = c(0.2, 0.1, 0.3, 0.1, 0.6, 0.7, 0.8, 0.4 ,0.9, 0.4))
x
inspect(x)
image(x)
library(arules)
x = random.transactions(nItems = 5,
nTrans = 10,
method = "independent",
iProb = c(0.2, 0.1, 0.3, 0.1, 0.6, 0.7, 0.8, 0.4 ,0.9, 0.4))
image(x)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(arules)
x = random.transactions(nItems = 5,
nTrans = 10,
method = "independent",
iProb = c(0.2, 0.1, 0.3, 0.1, 0.6))
image(x)
?random.transactions
patrones = random.patterns(nItems = 5,
nPats = 15,
method = "agrawal",
lPats = 2,
corr = 0.5,
cmean = 0.5,
cvar = 0.1, iweight= NULL)
agrawal = random.transactions(nItems = 20,
nTrans = 20,
method= "agrawal",
patterns = patrones)
image(agrawal)
patrones = random.patterns(nItems = 5,
nPats = 15,
method = "agrawal",
lPats = 2,
corr = 0.5,
cmean = 0.5,
cvar = 0.1, iweight= NULL)
patrones = random.patterns(nItems = 5,
nPats = 15,
method = "agrawal",
lPats = 4,
corr = 0.7,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
patrones = random.patterns(nItems = 20,
nPats = 20,
method = "agrawal",
lPats = 4,
corr = 0.7,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
agrawal = random.transactions(nItems = 20,
nTrans = 20,
method= "agrawal",
patterns = patrones)
image(agrawal)
tipo_1 = random.transactions(nItems = 5,
nTrans = 10,
method = "independent",
iProb = c(0.9, 0.1, 0.8, 0.1, 0.6))
tipo_2 = random.transactions(nItems = 5,
nTrans = 10,
method = "independent",
iProb = c(0.1, 0.7, 0.2, 0.9, 0.6))
transacciones = c(tipo_1, tipo_2)
image(transacciones)
?random.transactions
patrones = random.patterns(nItems = 5,
nPats = 20,
method = "agrawal",
lPats = 4,
corr = 0.7,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
patrones = random.patterns(nItems = 5,
nPats = 20,
method = "agrawal",
lPats = 4,
corr = 0.7,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
agrawal = random.transactions(nItems = 5,
nTrans = 20,
method= "agrawal",
patterns = patrones)
patrones = random.patterns(nItems = 5,
nPats = 20,
method = "agrawal",
lPats = 2,
corr = 0.7,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
agrawal = random.transactions(nItems = 5,
nTrans = 20,
method= "agrawal",
patterns = patrones)
patrones = random.patterns(nItems = 5,
nPats = 5,
method = "agrawal",
lPats = 2,
corr = 0.7,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
agrawal = random.transactions(nItems = 5,
nTrans = 20,
method= "agrawal",
patterns = patrones)
patrones = random.patterns(nItems = 5,
nPats = 5,
method = "agrawal",
lPats = 2,
corr = 0.7,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
agrawal = random.transactions(nItems = 5,
nTrans = 5,
method= "agrawal",
patterns = patrones)
patrones = random.patterns(nItems = 20,
nPats = 20,
method = "agrawal",
lPats = 4,
corr = 0.6,
cmean = 0.3,
cvar = 0.1, iWeight= NULL)
agrawal = random.transactions(nItems = 20,
nTrans = 20,
method= "agrawal",
patterns = patrones)
summary(patrones)
reglas = apriori (data=agrawal)
inspect(reglas)
inspect(sample(reglas, size=20)
?random.transactions
?apriori
?apriori
install.packages("knn")
install("arulesViz")
install = function(pkg){
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("arulesViz")
install("arulesViz")
install("arules")
install("sets")
help(pacfkage='kmeans')
help(package='kmeans')
data(iris)
datos <-iris
datos$Species=NULL;
kmedias <- kmeans(x=datos,3)
View(datos)
table(iris$Species,kmedias$cluster)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch = 19)
points(kmedias$centers[,c("Petal.Length","Petal.Width")],col=1:3,pch=19,cex=3)
kmedias <- kmeans(x=datos,centers=matrix(data=c(0.1,0.3,0.4,0.9,5,4,3,2,1,10,9,8),3,4),iter.max=2,algorithm="Lloyd")
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster)
matrix(data=c(0.1,0.3,0.4,0.9,5,4,3,2,1,10,9,8),3,4)
datos$Sepal.Length
datos$Sepal.Width
head(datos)
kmedias <- kmeans(x=datos,centers=matrix(data=c(0.1,0.3,0.4,0.9,5,4,3,2,1,10,9,8),3,4),iter.max=2,algorithm="Lloyd")
kmedias
kmedias <- kmeans(x=datos,3)
kmedias$centers
matrix(data=c(0.3,0.3,0.4,0.9,5,4,3,2,1,10,9,8),3,4)
kmedias <- kmeans(x=datos,
centers= matrix(data=c(4,4,4,0.9,5,4,3,2,1,10,9,8),3,4),
iter.max=2,algorithm="Lloyd")
table(iris$Species,kmedias$cluster)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster)
kmedias <- kmeans(x=datos,
centers= matrix(data=c(6,5,1,3,2,1,5,4,0,2,1,8),3,4),
iter.max=2,algorithm="Lloyd")
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster)
points(kmedias$centers,col=1:4,pch=19,cex=4)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(kmedias$centers,col=1:4,pch=19,cex=4)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(kmedias$centers,col=kmedias$clusters,pch=19,cex=4)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(kmedias$centers,col=kmedias$cluster,pch=19,cex=4)
kmedias <- kmeans(x=datos,
centers= matrix(data=c(6,5,1,3,2,1,5,4,0,2,1,8),3,4),
iter.max=2,algorithm="Lloyd")
kmedias <- kmeans(x=datos,
centers= matrix(data=c(6,5,1,3,2,1,5,4,0,2,1,8),3,4))
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(kmedias$centers[,c("Petal.Length","Petal.Width")],col=kmedias$cluster,pch=19,cex=4)
kmedias$centers
kmedias <- kmeans(x=datos,
centers= matrix(data=c(6,5,1,3,2,1,5,4,0,2,1,8),3,4),
algorithm = "Lloyd")
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(kmedias$centers[,c("Petal.Length","Petal.Width")],col=kmedias$cluster,pch=19,cex=4)
kmedias <- kmeans(x=datos,
centers= matrix(data=c(6,5,1,3,2,1,5,4,0,2,1,8),3,4),
iter.max = 50,
nstart = 3,
algorithm = "Lloyd")
kmedias
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(kmedias$centers[,c("Petal.Length","Petal.Width")],col=kmedias$cluster,pch=19,cex=4)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(kmedias$centers[,c("Petal.Length","Petal.Width")],col=c("red","black"),pch=19,cex=4)
points(matrix(data=c(6,5,1,3,2,1),3,2),col=c("green","blue"),pch=19,cex=4)
points(matrix(data=c(6,5,1,3,2,1,5,4,0,2,1,8),3,4),col=c("green","blue", "orange", "yellow"),pch=19,cex=4)
plot(datos[c("Petal.Length","Petal.Width")],col=kmedias$cluster, pch=19)
points(matrix(data=c(6,5,1,3,2,1,5,4,0,2,1,8),3,4),col=c("green","blue", "orange", "yellow"),pch=19,cex=4)
points(kmedias$centers[,c("Petal.Length","Petal.Width")],col=c("red","black"),pch=19,cex=4)
?sample
muestra <- datos[sample(nrows(iris), size = 30), ]
muestra <- datos[sample(nrow(iris), size = 30), ]
head(muestra)
kmedias <- kmeans(x=muestra,
kmedias <- kmeans(x=muestra,
nstart = 3)
kmedias
kmedias <- kmeans(x=muestra, 3)
centros <- kmeans(x=muestra, 3)
centros$centers
.
nueva_salida <- kmeans(x = datos,
nstart = 3,
centers = centros$centers,
algorithm = "Lloyd",
iiter.max = 3)
nueva_salida <- kmeans(x = datos,
nstart = 3,
centers = centros$centers,
algorithm = "Lloyd",
iter.max = 3)
nueva_salida
plot(datos[c("Petal.Length","Petal.Width")],col=nueva_salida$cluster, pch=19)
points(nueva_salida$centers[,c("Petal.Length","Petal.Width")],col=nueva_salida$cluster,pch=19,cex=4)
points(muestra[c("Petal.Length","Petal.Width")],col=c("green","blue", "orange", "yellow"),pch=19,cex=4)
plot(datos[c("Petal.Length","Petal.Width")],col=nueva_salida$cluster, pch=19)
points(nueva_salida$centers[,c("Petal.Length","Petal.Width")],col=nueva_salida$cluster,pch=19,cex=4)
points(centros$centers[c("Petal.Length","Petal.Width")],col=c("green","blue", "orange", "yellow"),pch=19,cex=4)
points(centros$centers[c("Petal.Length","Petal.Width")],col=c("green","blue", "orange", "yellow"),pch=19,cex=4)
points(nueva_salida$centers[,c("Petal.Length","Petal.Width")],col=nueva_salida$cluster,pch=19,cex=4)
plot(datos[c("Petal.Length","Petal.Width")],col=nueva_salida$cluster, pch=19)
points(nueva_salida$centers[,c("Petal.Length","Petal.Width")],col=nueva_salida$cluster,pch=19,cex=4)
points(centros$centers[,c("Petal.Length","Petal.Width")],col=c("green","blue", "orange", "yellow"),pch=19,cex=4)
points(nueva_salida$centers[,c("Petal.Length","Petal.Width")],col="black",pch=19,cex=4)
rm(list=ls())
data(iris)
datos = iris
?dist
distancia <- dist(datos)
View(datos)
length(distancia)
view(distancia)
distancia
cluster = hclust(distancia)
plot(cluster)
identify(cluster, function(i) print(table[iris,5])))
identify(cluster, function(i) print(table(iris[i,5])))
identify(cluster, function(i) print(i))
identify(cluster, function(i|) print(i))
identify(cluster, function(i) print(i))
identify(cluster, function(i) print(length(cluster))))
identify(cluster, function(i) print(length(i))))
identify(cluster, function(i) print(length(i)))
dendrograma = as.dendrogram(cluster)
corte = cut(dendrograma, h = 3)
plot(cluster)
dendrograma = as.dendrogram(cluster)
corte = cut(dendrograma, h = 3)
up
corte = cut(dendrograma, h = 3)$upper
plot(corte,main = "Corte con Altura 3")
identify(cluster, function(i) print(i))
identify(corte, function(i) print(i))
curtree(cluster,h=3)
cutree(cluster,h=3)
table(cutree(cluster,h=3))
plot(cluster)
cutree(cluster,k=4)
cluster = hclust(distancia,method="median")
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
class(tagList(input$entry))
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
shiny::runApp('C:/Users/isys/Desktop/DM1/ProyectoMineria/ShinyChat')
setwd("C:\\Users\\isys\\Documents\\DataMining\\clusterizacion_jerarquica\\tarea")
getwd()
setwd("..")
C:\\Users\\isys\\Documents\\DataMining\\clusterizacion_jerarquica\\tarea
setwd("C:\\Users\\isys\\Documents\\DataMining\\clusterizacion_jerarquica\\tarea")
setwd("C:\\Users\\isys\\Desktop\\DM1\\DataMining\\clusterizacion_jerarquica\\tarea\\Data\\")
setwd("..")
getwd()
setwd("..")
getwd()
setwd("C:/Users/isys/Desktop/DM1/data-minning-project/ShinyApp")
setwd("..")
setwd("ShinyApp/data/")
badwords <- read.csv2(file = "badwords_lists.csv",header = F,sep = ",")
badwords <- read.csv2(file = "badwords_lists.csv",header = F)
badwords <- read.csv2(file = "badwords_lists.csv",header = F,quote = "")
badwords <- read.csv2(file = "badwords_lists.csv")
badwords <- read.csv(file = "badwords_lists.csv")
badwords <- read.csv(file = "badwords_lists.csv",header = F)
badwords <- read.csv(file = "badwords_lists.csv",header = F,nrows = 550)
badwords <- read.csv(file = "badwords_lists.csv",header = F,nrows = 550)
badwords
badwords <- read.csv(file = "badwords_lists.csv",header = F,nrows = 550)
badwords <- read.csv(file = "badwords_lists.csv",header = F,nrows = 550)
badwords <- read.csv(file = "badwords_lists.csv",header = F)
badwords <- read.csv(file = "badwords_lists.csv",header = F,flush = T)
badwords <- read.csv(file = "badwords_lists.csv",header = T,flush = T)
badwords <- read.csv(file = "badwords_lists.csv",header = F)
getwd()
file <- "badwords_lists.csv"
lines <- readLines(file)
columns <- strsplit(lines, ';')
headers <- sapply(columns, '[[', 1)
data <- lapply(columns, '[', -1)
df <- do.call(cbind, data)
data
badwords <- read.csv(file = "badwordsL.csv",header = F)
shiny::runApp('C:/Users/isys/Desktop/DM1/data-minning-project/ShinyApp')
getwd()
setwd("..")
getwd()
shiny::runApp()
source("Code/clean.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
c(1,2,3) %in% c(12)
c(1,2,3) %in% c(1,2)
c(1,2,3) %in% c(1,2,5,6,7)
train[train$Insult == 1]
train[Insult == 1]
train[train$Insult == 1]
train[train$Insult == 1,]
train[,train$Insult == 1]
train[train$Insult == 1,]$Comment
View(train[train$Insult == 1,]$Comment)
train[train$Insult == 1,]$Comment[1]
as.character(train[train$Insult == 1,]$Comment[1])
as.character(train[train$Insult == 1,]$Comment[2])
as.character(train[train$Insult == 1,]$Comment[3])
w <- as.character(train[train$Insult == 1,]$Comment)
cleanSet(w)
cleanSet<- function(word){
## @knitr encoding_input
enc2utf8(word)
## @knitr creating_corpus
vs <- VectorSource(word)
txt <- Corpus(vs)
rm("vs")
## @knitr to_lowering
txtlc <- tm_map(txt, content_transformer(tolower))
rm("txt")
## @knitr removing_punctuations
txtnp <- tm_map(txtlc, content_transformer(removePunctuation))
rm("txtlc")
## @knitr removing_number
txtnn <- tm_map(txtnp, content_transformer(removeNumbers))
rm("txtnp")
stopwords <- c("a", "about", "above", "above", "across", "after", "afterwards", "again", "against", "all", "almost", "alone", "along", "already", "also","although","always","am","among", "amongst", "amoungst", "amount",  "an", "and", "another", "any","anyhow","anyone","anything","anyway", "anywhere", "are", "around", "as",  "at", "back","be","became", "because","become","becomes", "becoming", "been", "before", "beforehand", "behind", "being", "below", "beside", "besides", "between", "beyond", "bill", "both", "bottom","but", "by", "call", "can", "cannot", "cant", "co", "con", "could", "couldnt", "cry", "de", "describe", "detail", "do", "done", "down", "due", "during", "each", "eg", "eight", "either", "eleven","else", "elsewhere", "empty", "enough", "etc", "even", "ever", "every", "everyone", "everything", "everywhere", "except", "few", "fifteen", "fify", "fill", "find", "fire", "first", "five", "for", "former", "formerly", "forty", "found", "four", "from", "front", "full", "further", "get", "give", "go", "had", "has", "hasnt", "have", "he", "hence", "her", "here", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "him", "himself", "his", "how", "however", "hundred", "ie", "if", "in", "inc", "indeed", "interest", "into", "is", "it", "its", "itself", "keep", "last", "latter", "latterly", "least", "less", "ltd", "made", "many", "may", "me", "meanwhile", "might", "mill", "mine", "more", "moreover", "most", "mostly", "move", "much", "must", "my", "myself", "name", "namely", "neither", "never", "nevertheless", "next", "nine", "no", "nobody", "none", "noone", "nor", "not", "nothing", "now", "nowhere", "of", "off", "often", "on", "once", "one", "only", "onto", "or", "other", "others", "otherwise", "our", "ours", "ourselves", "out", "over", "own","part", "per", "perhaps", "please", "put", "rather", "re", "same", "see", "seem", "seemed", "seeming", "seems", "serious", "several", "she", "should", "show", "side", "since", "sincere", "six", "sixty", "so", "some", "somehow", "someone", "something", "sometime", "sometimes", "somewhere", "still", "such", "system", "take", "ten", "than", "that", "the", "their", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "therefore", "therein", "thereupon", "these", "they", "thickv", "thin", "third", "this", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "top", "toward", "towards", "twelve", "twenty", "two", "un", "under", "until", "up", "upon", "us", "very", "via", "was", "we", "well", "were", "what", "whatever", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", "who", "whoever", "whole", "whom", "whose", "why", "will", "with", "within", "without", "would", "yet", "you", "your", "yours", "yourself", "yourselves", "the")
withoutstop <- tm_map(txtnn, content_transformer(function(x) removeWords(x,stopwords)))
## @knitr removing_whitespaces
txtnspc <- tm_map(withoutstop, content_transformer(stripWhitespace))
rm("txtnn","withoutstop")
## @knitr steming_doc
txtstem <- tm_map(txtnspc, content_transformer(stemDocument))
txtcomplete <- tm_map(txtstem, content_transformer(function(x) stemCompletion(x,dictionary=txtnspc)))
rm("txtnspc")
word1 <- tm_map(txtcomplete, content_transformer(PlainTextDocument))
inspect(txtcomplete[1])
#txtcomplete <- txtstem
dataframe<-data.frame(text=unlist(sapply(txtcomplete, `[`, "content")),
stringsAsFactors=F)
return(dataframe)
}
cleanSet(w)
View(train)
word <- w
enc2utf8(word)
vs <- VectorSource(word)
txt <- Corpus(vs)
rm("vs")
txtlc <- tm_map(txt, content_transformer(tolower))
rm("txt")
## @knitr removing_punctuations
txtnp <- tm_map(txtlc, content_transformer(removePunctuation))
rm("txtlc")
txtnn <- tm_map(txtnp, content_transformer(removeNumbers))
rm("txtnp")
stopwords <- c("a", "about", "above", "above", "across", "after", "afterwards", "again", "against", "all", "almost", "alone", "along", "already", "also","although","always","am","among", "amongst", "amoungst", "amount",  "an", "and", "another", "any","anyhow","anyone","anything","anyway", "anywhere", "are", "around", "as",  "at", "back","be","became", "because","become","becomes", "becoming", "been", "before", "beforehand", "behind", "being", "below", "beside", "besides", "between", "beyond", "bill", "both", "bottom","but", "by", "call", "can", "cannot", "cant", "co", "con", "could", "couldnt", "cry", "de", "describe", "detail", "do", "done", "down", "due", "during", "each", "eg", "eight", "either", "eleven","else", "elsewhere", "empty", "enough", "etc", "even", "ever", "every", "everyone", "everything", "everywhere", "except", "few", "fifteen", "fify", "fill", "find", "fire", "first", "five", "for", "former", "formerly", "forty", "found", "four", "from", "front", "full", "further", "get", "give", "go", "had", "has", "hasnt", "have", "he", "hence", "her", "here", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "him", "himself", "his", "how", "however", "hundred", "ie", "if", "in", "inc", "indeed", "interest", "into", "is", "it", "its", "itself", "keep", "last", "latter", "latterly", "least", "less", "ltd", "made", "many", "may", "me", "meanwhile", "might", "mill", "mine", "more", "moreover", "most", "mostly", "move", "much", "must", "my", "myself", "name", "namely", "neither", "never", "nevertheless", "next", "nine", "no", "nobody", "none", "noone", "nor", "not", "nothing", "now", "nowhere", "of", "off", "often", "on", "once", "one", "only", "onto", "or", "other", "others", "otherwise", "our", "ours", "ourselves", "out", "over", "own","part", "per", "perhaps", "please", "put", "rather", "re", "same", "see", "seem", "seemed", "seeming", "seems", "serious", "several", "she", "should", "show", "side", "since", "sincere", "six", "sixty", "so", "some", "somehow", "someone", "something", "sometime", "sometimes", "somewhere", "still", "such", "system", "take", "ten", "than", "that", "the", "their", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "therefore", "therein", "thereupon", "these", "they", "thickv", "thin", "third", "this", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "top", "toward", "towards", "twelve", "twenty", "two", "un", "under", "until", "up", "upon", "us", "very", "via", "was", "we", "well", "were", "what", "whatever", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", "who", "whoever", "whole", "whom", "whose", "why", "will", "with", "within", "without", "would", "yet", "you", "your", "yours", "yourself", "yourselves", "the")
withoutstop <- tm_map(txtnn, content_transformer(function(x) removeWords(x,stopwords)))
txtnspc <- tm_map(withoutstop, content_transformer(stripWhitespace))
rm("txtnn","withoutstop")
txtstem <- tm_map(txtnspc, content_transformer(stemDocument))
txtcomplete <- tm_map(txtstem, content_transformer(function(x) stemCompletion(x,dictionary=txtnspc)))
word <- as.character(train[train$Insult == 1,]$Comment)
# Carga de los datos del problema
setwd("./data/training/")
train <- load("data.Rdata")
train <- data
setwd("..")
badwords <- read.csv(file = "badwordsL.csv",header = F)
setwd("..")
rm("data")
## @knitr end_chunk
word <- as.character(train[train$Insult == 1,]$Comment)
enc2utf8(word)
vs <- VectorSource(word)
txt <- Corpus(vs)
rm("vs")
txtlc <- tm_map(txt, content_transformer(tolower))
rm("txt")
txtnp <- tm_map(txtlc, content_transformer(removePunctuation))
rm("txtlc")
txtnn <- tm_map(txtnp, content_transformer(removeNumbers))
rm("txtnp")
stopwords <- c("a", "about", "above", "above", "across", "after", "afterwards", "again", "against", "all", "almost", "alone", "along", "already", "also","although","always","am","among", "amongst", "amoungst", "amount",  "an", "and", "another", "any","anyhow","anyone","anything","anyway", "anywhere", "are", "around", "as",  "at", "back","be","became", "because","become","becomes", "becoming", "been", "before", "beforehand", "behind", "being", "below", "beside", "besides", "between", "beyond", "bill", "both", "bottom","but", "by", "call", "can", "cannot", "cant", "co", "con", "could", "couldnt", "cry", "de", "describe", "detail", "do", "done", "down", "due", "during", "each", "eg", "eight", "either", "eleven","else", "elsewhere", "empty", "enough", "etc", "even", "ever", "every", "everyone", "everything", "everywhere", "except", "few", "fifteen", "fify", "fill", "find", "fire", "first", "five", "for", "former", "formerly", "forty", "found", "four", "from", "front", "full", "further", "get", "give", "go", "had", "has", "hasnt", "have", "he", "hence", "her", "here", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "him", "himself", "his", "how", "however", "hundred", "ie", "if", "in", "inc", "indeed", "interest", "into", "is", "it", "its", "itself", "keep", "last", "latter", "latterly", "least", "less", "ltd", "made", "many", "may", "me", "meanwhile", "might", "mill", "mine", "more", "moreover", "most", "mostly", "move", "much", "must", "my", "myself", "name", "namely", "neither", "never", "nevertheless", "next", "nine", "no", "nobody", "none", "noone", "nor", "not", "nothing", "now", "nowhere", "of", "off", "often", "on", "once", "one", "only", "onto", "or", "other", "others", "otherwise", "our", "ours", "ourselves", "out", "over", "own","part", "per", "perhaps", "please", "put", "rather", "re", "same", "see", "seem", "seemed", "seeming", "seems", "serious", "several", "she", "should", "show", "side", "since", "sincere", "six", "sixty", "so", "some", "somehow", "someone", "something", "sometime", "sometimes", "somewhere", "still", "such", "system", "take", "ten", "than", "that", "the", "their", "them", "themselves", "then", "thence", "there", "thereafter", "thereby", "therefore", "therein", "thereupon", "these", "they", "thickv", "thin", "third", "this", "those", "though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "top", "toward", "towards", "twelve", "twenty", "two", "un", "under", "until", "up", "upon", "us", "very", "via", "was", "we", "well", "were", "what", "whatever", "when", "whence", "whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", "who", "whoever", "whole", "whom", "whose", "why", "will", "with", "within", "without", "would", "yet", "you", "your", "yours", "yourself", "yourselves", "the")
withoutstop <- tm_map(txtnn, content_transformer(function(x) removeWords(x,stopwords)))
txtnspc <- tm_map(withoutstop, content_transformer(stripWhitespace))
rm("txtnn","withoutstop")
txtstem <- tm_map(txtnspc, content_transformer(stemDocument))
word1 <- tm_map(txtstem, content_transformer(PlainTextDocument))
dtm <- TermDocumentMatrix(word1)
dtm2 <- removeSparseTerms(dtm, 0.94)
freq <- findFreqTerms(dtm2,10)
freq
freq <- findFreqTerms(dtm2,5)
freq
dtm2 <- removeSparseTerms(dtm, 0.84)
freq <- findFreqTerms(dtm2,5)
freq
dtm2 <- removeSparseTerms(dtm, 0.98)
freq <- findFreqTerms(dtm2,5)
freq
freq <- findFreqTerms(dtm2,2)
freq
dtm2 <- removeSparseTerms(dtm, 0.99)
freq <- findFreqTerms(dtm2,5)
freq
freq <- findFreqTerms(dtm,5)
freq
cleanComm<-function(word){
Encoding(word) <-"utf8"
## @knitr to_lowering
word<- tolower(word)
## @knitr removing_punctuations
word<- removePunctuation(word)
## @knitr removing_number
word <- removeNumbers(word)
## @knitr removing_whitespaces
wordn <- stripWhitespace(word)
## @knitr steming_doc
word <- stemDocument(word)
word <- stemCompletion(word,dictionary=wordn)
return(as.character(wordn))
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
